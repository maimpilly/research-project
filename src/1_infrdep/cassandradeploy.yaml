---
- name: execute python script to generate docker-compose files for each active node
  hosts: archi_controll
  remote_user: root
  become: yes

  tasks: 
    - name: python script execution
      shell: 'python3 /home/{{ansible_user}}/IAS_Project/infrdep/cassandra_DC_file/DC_file_gyn.py'

    - name: copy controller info to get_module repo
      ansible.builtin.copy:
        src: "/home/{{ansible_user}}/IAS_Project/infrdep/cassandra_DC_file/{{inventory_hostname}}.json"
        dest: "/home/{{ansible_user}}/IAS_Project/microservice/get_module/server_info.json"
        owner: "{{ansible_user}}"
        mode: 0644


- name: full ArchiInfrastructure deploymenmt
  hosts: activ_nodes
  remote_user: root
  become: yes
  vars:
    states: present # present/absent if starting/stoping the Cluster 
    new_deployment: false # becomes true if the active_nodes group in the inventory was modified and states == "present"

  tasks:

    - name: copy docker-compose files to the active nodes
      ansible.builtin.copy:
        src: "/home/{{ansible_user}}/IAS_Project/infrdep/cassandra_DC_file/{{inventory_hostname}}.yaml"
        #src: "./IAS_Project/{{inventory_hostname}}.yaml"
        dest: "/home/{{ansible_user}}/IAS_Project/docker-compose.yaml"
        owner: "{{ansible_user}}"
        mode: 0644
      when: states == "present"
        
    - name: copy server info files to the active nodes
      ansible.builtin.copy:
        src: "/home/{{ansible_user}}/IAS_Project/infrdep/cassandra_DC_file/{{inventory_hostname}}.json"
        dest: "/home/{{ansible_user}}/IAS_Project/server_info.json"
        owner: "{{ansible_user}}"
        mode: 0644
      when: states == "present"
        
    - name: copy  catalogue_update.py to the active nodes
      ansible.builtin.copy:
        src: "/home/{{ansible_user}}/IAS_Project/infrdep/catalogue_mnt/catalogue_update.py"
        dest: "/home/{{ansible_user}}/IAS_Project/catalogue_update.py"
        owner: "{{ansible_user}}"
        mode: 0644
      when: states == "present"

    - name: update all packages using apt repo
      apt:
        update_cache: yes
        force_apt_get: yes
      become: true
      when: new_deployment == true

    - name: install pkgs
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
        state: present
      become: true
      when: new_deployment == true

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      when: new_deployment == true

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu jammy stable
        state: present
      when: new_deployment == true

    - name: Update apt and install docker-ce
      apt:
        name: docker-ce
        state: latest
        update_cache: true
      when: new_deployment == true

    - name: Install docker-compose
      get_url:
        url : https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: '755'
      when: new_deployment == true

    - name: Install Python pip
      apt: name={{ item }} update_cache=true state=present force_apt_get=yes
      with_items:
      - python-pip
      - python3-pip
      become: true
      when: new_deployment == true
    
    - name: install cassandra_driver python package
      ansible.builtin.pip:
        name: cassandra-driver
      when: new_deployment == true

    - name: install Boto3 python package
      ansible.builtin.pip:
        name: boto3
      when: new_deployment == true

    - name: Install Docker Module for Python
      pip:
        name: docker
      when: new_deployment == true
    

    - name: Install docker-compose Module for Python
      pip:
        name: docker-compose
      when: new_deployment == true

    - name: Create a cassandra docker volume if not exists # to be deleted if the cluster changes, delete (state: present --> absent) after stopping the cluster
      docker_volume:
        name: cassandra
        recreate: never
        state: present
      when: states == "present"


    - name: docker-compose remote build for cassandra
      community.docker.docker_compose:
        project_src: "./IAS_Project/"
        state: "{{states}}"

    - name: delete a cassandra docker volume if not exists # to be deleted if the cluster changes, delete (state: present --> absent) after stopping the cluster
      docker_volume:
        name: cassandra
        recreate: never
        state: absent
      when: states == "absent"
    
    - name: Sleep for 60 seconds and continue with play
      ansible.builtin.wait_for:
        timeout: 60
      #delegate_to: localhost
      when: states == "present"

    - name: python script execution for updating data catalog
      shell: "python3 /home/researchproject/IAS_Project/catalogue_update.py"
      when: states == "present"

    - name: CronJob every 5 min for updating Cassandra Data Base
      ansible.builtin.cron:
        name: "Cassandra DB Update"
        job: "cd   && python3 /home/researchproject/IAS_Project/catalogue_update.py >> /home/{{ansible_user}}/IAS_Project/cron_log.txt 2>&1"
        minute: "*/5"   
        state: "{{states}}"  

